# Generated by Django 2.1.7 on 2019-04-17 08:46

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('last_updated_source', models.PositiveIntegerField(choices=[('worldbase', 'Worldbase file'), ('api', 'API')])),
                ('duns_number', models.CharField(db_index=True, max_length=9, validators=[django.core.validators.RegexValidator(code='invalid', message='Field should contain 9 numbers only', regex='^\\d{9}$')], verbose_name='Duns number')),
                ('primary_name', models.CharField(max_length=90, verbose_name='Primary name')),
                ('trading_names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('address_line_1', models.CharField(blank=True, max_length=64, verbose_name='Street address')),
                ('address_line_2', models.CharField(blank=True, max_length=64, verbose_name='Street address 2')),
                ('address_town', models.CharField(blank=True, max_length=30, verbose_name='City')),
                ('address_county', models.CharField(blank=True, max_length=30, verbose_name='State')),
                ('address_postcode', models.CharField(blank=True, max_length=9, verbose_name='Postal code')),
                ('registered_address_line_1', models.CharField(blank=True, max_length=64, verbose_name='Street address')),
                ('registered_address_line_2', models.CharField(blank=True, max_length=64, verbose_name='Street address 2')),
                ('registered_address_town', models.CharField(blank=True, max_length=30, verbose_name='City')),
                ('registered_address_county', models.CharField(blank=True, max_length=30, verbose_name='State')),
                ('registered_address_postcode', models.CharField(blank=True, max_length=9, verbose_name='Postal code')),
                ('line_of_business', models.CharField(max_length=41, verbose_name='Line of business')),
                ('is_out_of_business', models.BooleanField(verbose_name='Is out of business?')),
                ('year_started', models.PositiveIntegerField(verbose_name='Year started')),
                ('global_ultimate_duns_number', models.CharField(blank=True, db_index=True, max_length=9, validators=[django.core.validators.RegexValidator(code='invalid', message='Field should contain 9 numbers only', regex='^\\d{9}$')], verbose_name='Glogal ultimate duns number')),
                ('employee_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Employee number')),
                ('is_employees_number_estimated', models.BooleanField(blank=True, null=True, verbose_name='Is employee number estimated?')),
                ('annual_sales', models.FloatField(blank=True, help_text='Annual sales in US dollars', null=True, verbose_name='Annual sales')),
                ('is_annual_sales_estimated', models.BooleanField(blank=True, null=True, verbose_name='Is annual sales estimated?')),
                ('legal_status', models.CharField(max_length=3, verbose_name='Legal status')),
                ('status_code', models.PositiveIntegerField(choices=[('corporation', 'Corporation'), ('joint_venture', 'Joint venture'), ('partnership_of_unknown_type', 'Partnership Of Unknown Type'), ('proprietorship', 'Proprietorship'), ('government_body', 'Government Body'), ('cooperative', 'Cooperative'), ('non_profit_organisation', 'Non Profit Organization'), ('local_governmenet_body', 'Local Government Body'), ('foreign_company', 'Foreign Company'), ('master_limited_partnership', 'Master Limited Partnership'), ('limited_liability', 'Limited Liability'), ('private_limited_company', 'Private Limited Company')], verbose_name='Status code')),
            ],
            options={
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('iso_alpha2', models.CharField(help_text='ISO 2 digit alphanumeric country code', max_length=2)),
                ('iso_alpha3', models.CharField(help_text='ISO 3 digital alphanumeric country code', max_length=3)),
                ('iso_numeric', models.PositiveIntegerField(help_text='ISO 3 digit numeric country code')),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='RegistrationNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_type', models.CharField(choices=[('uk_companies_house_number', 'UK Companies house number'), ('uk_vat_number', 'VAT Registration number')], max_length=100)),
                ('registration_number', models.CharField(max_length=50)),
            ],
        ),
        migrations.AddField(
            model_name='company',
            name='address_country',
            field=models.ForeignKey(on_delete='Country', related_name='+', to='company.Country'),
        ),
        migrations.AddField(
            model_name='company',
            name='registered_address_country',
            field=models.ForeignKey(blank=True, null=True, on_delete='Country', related_name='+', to='company.Country'),
        ),
        migrations.AddField(
            model_name='company',
            name='registration_numbers',
            field=models.ManyToManyField(blank=True, to='company.RegistrationNumber'),
        ),
    ]
